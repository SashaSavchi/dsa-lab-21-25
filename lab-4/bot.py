import os
import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage) 

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
currencies = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CurrencyStates(StatesGroup):
    waiting_currency_name = State()
    waiting_currency_rate = State()
    waiting_convert_currency = State()
    waiting_convert_amount = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
def get_main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="/save_currency"),
        types.KeyboardButton(text="/convert"),
        types.KeyboardButton(text="/list")
    )
    return builder.as_markup(resize_keyboard=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã
def validate_currency(currency: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –≤–∞–ª—é—Ç–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ (3 —Å–∏–º–≤–æ–ª–∞)"""
    return bool(re.fullmatch(r'^[A-Za-z]{3}$', currency))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üí± –ë–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/save_currency - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n"
        "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã",
        reply_markup=get_main_menu_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message(lambda message: message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "—Å—Ç–æ–ø", "cancel", "–≤—ã—Ö–æ–¥", "–Ω–∞—á–∞—Ç—å"])
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    await cmd_start(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /save_currency
@dp.message(Command("save_currency"))
async def cmd_save_currency(message: types.Message, state: FSMContext):
    await state.set_state(CurrencyStates.waiting_currency_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):",
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.message(CurrencyStates.waiting_currency_name)
async def process_currency_name(message: types.Message, state: FSMContext):
    currency = message.text.upper()
    if not validate_currency(currency):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã! –í–≤–µ–¥–∏—Ç–µ 3 –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
    else:
        await state.update_data(currency=currency)
        await state.set_state(CurrencyStates.waiting_currency_rate)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {currency} –∫ RUB (–Ω–∞–ø—Ä–∏–º–µ—Ä: 85.8):")

@dp.message(CurrencyStates.waiting_currency_rate)
async def process_currency_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
        if rate <= 0:
            raise ValueError
            
        data = await state.get_data()
        currency = data['currency']
        currencies[currency] = rate
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ö—É—Ä—Å {currency} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: 1 {currency} = {rate} RUB",
            reply_markup=get_main_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /convert
@dp.message(Command("convert"))
async def cmd_convert(message: types.Message, state: FSMContext):
    if not currencies:
        await message.answer(
            "üîπ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /save_currency",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await state.set_state(CurrencyStates.waiting_convert_currency)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(CurrencyStates.waiting_convert_currency)
async def process_convert_currency(message: types.Message, state: FSMContext):
    currency = message.text.upper()
    if not validate_currency(currency):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã! –í–≤–µ–¥–∏—Ç–µ 3 –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
    
    elif currency not in currencies:
        await message.answer(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    else:
        await state.update_data(currency=currency)
        await state.set_state(CurrencyStates.waiting_convert_amount)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ RUB:")

@dp.message(CurrencyStates.waiting_convert_amount)
async def process_convert_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
            
        data = await state.get_data()
        currency = data['currency']
        rate = currencies[currency]
        result = amount * rate
        
        await state.clear()
        await message.answer(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
            f"{amount} {currency} = {result:.2f} RUB\n"
            f"–ö—É—Ä—Å: 1 {currency} = {rate} RUB",
            reply_markup=get_main_menu_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    if not currencies:
        await message.answer(
            "‚ùó –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç",
            reply_markup=get_main_menu_keyboard()
        )
    else:
    
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        for currency in currencies.keys():
            builder.button(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {currency}", callback_data=f"delete_{currency}")
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
        
        response = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:\n" + "\n".join(
            f"- {currency}: {rate} RUB" for currency, rate in currencies.items()
        )
        
        await message.answer(
            response,
            reply_markup=builder.as_markup()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def process_delete_currency(callback: types.CallbackQuery):
    currency = callback.data.split("_")[1]
    
    if currency in currencies:
        del currencies[currency]
        await callback.message.edit_text(
            f"‚úÖ –í–∞–ª—é—Ç–∞ {currency} —É–¥–∞–ª–µ–Ω–∞",
            reply_markup=None
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/save_currency - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n"
        "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã",
        reply_markup=get_main_menu_keyboard()
    )


async def main():
    await dp.start_polling(bot, skip_updates=True)

asyncio.run(main())