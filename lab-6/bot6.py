import asyncio
import asyncpg
import re
import logging
import os
import httpx
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_COMMAND = os.getenv("ADMIN_COMMAND")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST"),
    "port": os.getenv("DB_PORT"),
    "database": os.getenv("DB_NAME"),
}

async def create_db_pool():
    return await asyncpg.create_pool(**DB_CONFIG)

async def init_db():
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            id SERIAL PRIMARY KEY,
            chat_id VARCHAR UNIQUE
        )
        ''')
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS currencies (
            id SERIAL PRIMARY KEY,
            currency_name VARCHAR UNIQUE,
            rate NUMERIC
        )
        ''')
    finally:
        await conn.close()

# URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
CURRENCY_MANAGER_URL = "http://localhost:5001"
DATA_MANAGER_URL = "http://localhost:5002"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class CurrencyStates(StatesGroup):
    waiting_currency_name = State()
    waiting_currency_rate = State()
    waiting_convert_currency = State()
    waiting_convert_amount = State()
    waiting_new_rate = State()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –≤–∞–ª—é—Ç—ã
def validate_currency(currency: str) -> bool:
    return bool(re.fullmatch(r'^[A-Za-z]{3}$', currency))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def get_inline_menu_keyboard(is_admin: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üí± –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="get_currencies")
    builder.button(text="üí∏ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="convert")
    if is_admin:
        builder.button(text="üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏", callback_data="manage_currency")
    builder.adjust(1)
    return builder.as_markup()

# –ê–¥–º–∏–Ω-–º–µ–Ω—é
async def get_currency_management_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="add_currency")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="delete_currency")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å", callback_data="change_rate")
    builder.button(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="back_to_main")
    builder.adjust(2)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    pool = dp["pool"]
    async with pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        admin = await conn.fetchrow("SELECT * FROM admins WHERE chat_id = $1", str(message.chat.id))
    is_admin = admin is not None
    menu = await get_inline_menu_keyboard(is_admin)

    if is_admin:
        response = (
            "üí± –ë–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"
        )
    else:
        response = (
            "üí± –ë–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"
        )

    await message.answer(response, reply_markup=menu)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_user_admin(chat_id: str) -> bool:
    pool = dp["pool"]
    async with pool.acquire() as conn:
        admin = await conn.fetchrow("SELECT * FROM admins WHERE chat_id = $1", chat_id)
    return admin is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message(lambda message: message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "—Å—Ç–æ–ø", "cancel", "–≤—ã—Ö–æ–¥", "–Ω–∞—á–∞—Ç—å"])
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    await cmd_start(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
@dp.callback_query(F.data == "get_currencies")
async def cb_get_currencies(callback: CallbackQuery):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{DATA_MANAGER_URL}/currencies")
            
            if response.status_code != 200:
                logger.error(f"Currency service error: {response.status_code} - {response.text}")
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
                return
            
            data = response.json()
            currencies = data.get("currencies", [])

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            is_admin = await is_user_admin(str(callback.message.chat.id))
            menu = await get_inline_menu_keyboard(is_admin)

            if currencies:
                response_text = "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é:\n" + "\n".join(
                    f"- {currency['currency_name']}: {currency['rate']} RUB"
                    for currency in currencies
                )
            else:
                response_text = "‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç"
            
            await callback.message.edit_text(response_text, reply_markup=menu)
            await callback.answer()
    except Exception as e:
        logger.error(f"Error in cb_get_currencies: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        
# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
@dp.callback_query(F.data == "convert")
async def cb_convert(callback: CallbackQuery, state: FSMContext):
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{DATA_MANAGER_URL}/currencies")
        if response.status_code != 200 or not response.json():
            await callback.message.answer("‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            await callback.answer()
            return

    await callback.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
    await state.set_state(CurrencyStates.waiting_convert_currency)
    await callback.answer()

@dp.message(CurrencyStates.waiting_convert_currency)
async def process_convert_currency(message: types.Message, state: FSMContext):
    currency = message.text.strip().upper()
    
    if not validate_currency(currency):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã! –í–≤–µ–¥–∏—Ç–µ 3 –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
        return

    async with httpx.AsyncClient() as client:
        response = await client.get(f"{DATA_MANAGER_URL}/convert", params={"currency_name": currency, "amount": 1})
        if response.status_code == 404:
            await message.answer(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        rate = response.json()["converted_amount"]

    await state.update_data(currency=currency, rate=rate)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ RUB:")
    await state.set_state(CurrencyStates.waiting_convert_amount)

@dp.message(CurrencyStates.waiting_convert_amount)
async def process_convert_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError

        data = await state.get_data()
        currency = data['currency']
        rate = data['rate']
        result = amount * rate
        await state.clear()

        is_admin = await is_user_admin(str(message.chat.id))
        menu = await get_inline_menu_keyboard(is_admin)

        await message.answer(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
            f"{amount} {currency} = {result:.2f} RUB\n"
            f"–ö—É—Ä—Å: 1 {currency} = {rate} RUB",
            reply_markup=menu
        )
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.callback_query(F.data == "manage_currency")
async def cb_manage_currency(callback: CallbackQuery):
    if not await is_user_admin(str(callback.message.chat.id)):
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", show_alert=True)
        return
    
    menu = await get_currency_management_keyboard()
    await callback.message.edit_text("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏:", reply_markup=menu)
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.callback_query(F.data == "add_currency")
async def cb_add_currency(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
    await state.set_state(CurrencyStates.waiting_currency_name)
    await callback.answer()

@dp.message(CurrencyStates.waiting_currency_name)
async def process_currency_name(message: types.Message, state: FSMContext):
    currency = message.text.strip().upper()
    if not validate_currency(currency):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 3 –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã:")
        return

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{DATA_MANAGER_URL}/currencies")
            if response.status_code != 200:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç")
                return
            
            data = response.json()
            currencies = data.get("currencies", [])
            
            if currency in [c["currency_name"] for c in currencies]:
                await message.answer(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:")
                return

        await state.update_data(currency_name=currency)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã –∫ —Ä—É–±–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 89.50):")
        await state.set_state(CurrencyStates.waiting_currency_rate)
    except Exception as e:
        logger.error(f"Error in process_currency_name: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.message(CurrencyStates.waiting_currency_rate)
async def process_currency_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
        if rate <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    currency_name = data['currency_name']
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{CURRENCY_MANAGER_URL}/load",
            json={"currency_name": currency_name, "rate": rate}
        )
        
        if response.status_code != 200:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: {response.json().get('detail', '')}")
            await state.clear()
            return

    is_admin = await is_user_admin(str(message.chat.id))
    menu = await get_inline_menu_keyboard(is_admin)
    await message.answer(f"‚úÖ –í–∞–ª—é—Ç–∞ {currency_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∫—É—Ä—Å–æ–º {rate} RUB.", reply_markup=menu)
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
@dp.callback_query(F.data == "delete_currency")
async def cb_delete_currency(callback: CallbackQuery):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{DATA_MANAGER_URL}/currencies")
            
            if response.status_code != 200:
                await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç")
                await callback.answer()
                return
                
            data = response.json()
            currencies = data.get("currencies", [])
            
            if not currencies:
                await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª—é—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                await callback.answer()
                return

            builder = InlineKeyboardBuilder()
            for currency in currencies:
                builder.button(
                    text=currency["currency_name"], 
                    callback_data=f"delete_{currency['currency_name']}"
                )
            builder.button(text="–ù–∞–∑–∞–¥", callback_data="manage_currency")
            builder.adjust(2)
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", 
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            
    except Exception as e:
        logger.error(f"Error in cb_delete_currency: {str(e)}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("delete_"))
async def cb_confirm_delete_currency(callback: CallbackQuery):
    currency_name = callback.data.split("_", 1)[1]
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{CURRENCY_MANAGER_URL}/delete",
                json={"currency_name": currency_name}
            )
            
            if response.status_code != 200:
                error_msg = response.json().get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: {error_msg}")
                await callback.answer()
                return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        pool = dp["pool"]
        async with pool.acquire() as conn:
            admin = await conn.fetchrow("SELECT * FROM admins WHERE chat_id = $1", str(callback.message.chat.id))
        is_admin = admin is not None
        
        menu = await get_inline_menu_keyboard(is_admin)
        await callback.message.edit_text(
            f"‚úÖ –í–∞–ª—é—Ç–∞ {currency_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=menu
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in cb_confirm_delete_currency: {str(e)}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã")
        await callback.answer()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
@dp.callback_query(F.data == "change_rate")
async def cb_change_rate(callback: CallbackQuery):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{DATA_MANAGER_URL}/currencies")
            
            if response.status_code != 200:
                await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç")
                await callback.answer()
                return
                
            data = response.json()
            currencies = data.get("currencies", [])
            
            if not currencies:
                await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª—é—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
                await callback.answer()
                return

            builder = InlineKeyboardBuilder()
            for currency in currencies:
                builder.button(
                    text=f"{currency['currency_name']} ({currency['rate']})", 
                    callback_data=f"change_{currency['currency_name']}"
                )
            builder.button(text="–ù–∞–∑–∞–¥", callback_data="manage_currency")
            builder.adjust(2)
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:", 
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            
    except Exception as e:
        logger.error(f"Error in cb_change_rate: {str(e)}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await callback.answer()

@dp.callback_query(F.data.startswith("change_"))
async def cb_start_change_rate(callback: CallbackQuery, state: FSMContext):
    currency_name = callback.data.split("_", 1)[1]
    await state.update_data(currency_to_change=currency_name)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è {currency_name}:")
    await state.set_state(CurrencyStates.waiting_new_rate)
    await callback.answer()

@dp.message(CurrencyStates.waiting_new_rate)
async def process_new_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
        if rate <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    currency_name = data['currency_to_change']
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{CURRENCY_MANAGER_URL}/update_currency",
                json={"currency_name": currency_name, "rate": rate}
            )
            
            if response.status_code != 200:
                error_msg = response.json().get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {error_msg}")
                await state.clear()
                return

        is_admin = await is_user_admin(str(message.chat.id))
        menu = await get_inline_menu_keyboard(is_admin)
        await message.answer(
            f"‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {currency_name} –æ–±–Ω–æ–≤–ª–µ–Ω: {rate} RUB.",
            reply_markup=menu
        )
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_new_rate: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞")

# –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
@dp.message(lambda message: message.text == ADMIN_COMMAND)
async def become_admin(message: Message):
    pool = dp["pool"]
    chat_id = str(message.chat.id)
    async with pool.acquire() as conn:
        exists = await conn.fetchval("SELECT 1 FROM admins WHERE chat_id = $1", chat_id)
        if not exists:
            await conn.execute("INSERT INTO admins (chat_id) VALUES ($1)", chat_id)
            await message.answer("‚úÖ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        else:
            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await cmd_start(message)

# –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
@dp.callback_query(F.data == "back_to_main")
async def cb_back_to_main(callback: CallbackQuery):
    pool = dp["pool"]
    chat_id = str(callback.message.chat.id)
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM admins WHERE chat_id = $1", chat_id)
    menu = await get_inline_menu_keyboard(False)
    await callback.message.edit_text("üìã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.", reply_markup=menu)
    await callback.answer()
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    pool = await create_db_pool()
    dp["pool"] = pool
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await pool.close()

if __name__ == "__main__":
    asyncio.run(main())