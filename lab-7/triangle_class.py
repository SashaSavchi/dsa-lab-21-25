# Объявление пользовательского исключения для случаев некорректных сторон треугольника
class IncorrectTriangleSides(Exception):
    pass

# Объявление класса Triangle для описания треугольника
class Triangle:
    # Определение конструктора класса
    def __init__(self, a, b, c):
        # Проверка на положительность всех сторон треугольника
        if a <= 0 or b <= 0 or c <= 0:
            # Если хотя бы одна сторона отрицательная или равна нулю, генерируется исключение
            raise IncorrectTriangleSides("Side lengths must be positive")
        # Проверка выполнения неравенства треугольника: сумма двух сторон должна быть больше третьей стороны
        if a + b <= c or a + c <= b or b + c <= a:
            # Если неравенство треугольника нарушено, генерируется исключение
            raise IncorrectTriangleSides("Invalid side lengths for a triangle")
        
        # Инициализация атрибутов объекта для хранения длин сторон треугольника
        self.a = a
        self.b = b
        self.c = c

    # Метод для определения типа треугольника
    def triangle_type(self):
        # Проверка на равенство всех сторон (равносторонний треугольник)
        if self.a == self.b == self.c:
            return "equilateral"  # Возвращается тип треугольника "равносторонний"
        # Проверка на равенство хотя бы двух сторон (равнобедренный треугольник)
        elif self.a == self.b or self.a == self.c or self.b == self.c:
            return "isosceles"  # Возвращается тип треугольника "равнобедренный"
        else:
            return "nonequilateral"  # Возвращается тип треугольника "разносторонний"

    # Метод для вычисления периметра треугольника
    def perimeter(self):
        return self.a + self.b + self.c  # Возвращается сумма длин всех сторон треугольника